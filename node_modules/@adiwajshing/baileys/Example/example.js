"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var node_cache_1 = require("node-cache");
var src_1 = require("../src");
var logger_1 = require("../src/Utils/logger");
var logger = logger_1.default.child({});
logger.level = 'trace';
var useStore = !process.argv.includes('--no-store');
var doReplies = !process.argv.includes('--no-reply');
// external map to store retry counts of messages when decryption/encryption fails
// keep this out of the socket itself, so as to prevent a message decryption/encryption loop across socket restarts
var msgRetryCounterCache = new node_cache_1.default();
// the store maintains the data of the WA connection in memory
// can be written out to a file & read from it
var store = useStore ? (0, src_1.makeInMemoryStore)({ logger: logger }) : undefined;
store === null || store === void 0 ? void 0 : store.readFromFile('./baileys_store_multi.json');
// save every 10s
setInterval(function () {
    store === null || store === void 0 ? void 0 : store.writeToFile('./baileys_store_multi.json');
}, 10000);
// start a connection
var startSock = function () { return __awaiter(void 0, void 0, void 0, function () {
    function getMessage(key) {
        return __awaiter(this, void 0, Promise, function () {
            var msg;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!store) return [3 /*break*/, 2];
                        return [4 /*yield*/, store.loadMessage(key.remoteJid, key.id)];
                    case 1:
                        msg = _a.sent();
                        return [2 /*return*/, (msg === null || msg === void 0 ? void 0 : msg.message) || undefined];
                    case 2: 
                    // only if store is present
                    return [2 /*return*/, src_1.proto.Message.fromObject({})];
                }
            });
        });
    }
    var _a, state, saveCreds, _b, version, isLatest, sock, sendMessageWTyping;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, (0, src_1.useMultiFileAuthState)('baileys_auth_info')
                // fetch latest version of WA Web
            ];
            case 1:
                _a = _c.sent(), state = _a.state, saveCreds = _a.saveCreds;
                return [4 /*yield*/, (0, src_1.fetchLatestBaileysVersion)()];
            case 2:
                _b = _c.sent(), version = _b.version, isLatest = _b.isLatest;
                console.log("using WA v".concat(version.join('.'), ", isLatest: ").concat(isLatest));
                sock = (0, src_1.default)({
                    version: version,
                    logger: logger,
                    printQRInTerminal: true,
                    auth: {
                        creds: state.creds,
                        /** caching makes the store faster to send/recv messages */
                        keys: (0, src_1.makeCacheableSignalKeyStore)(state.keys, logger),
                    },
                    msgRetryCounterCache: msgRetryCounterCache,
                    generateHighQualityLinkPreview: true,
                    // ignore all broadcast messages -- to receive the same
                    // comment the line below out
                    // shouldIgnoreJid: jid => isJidBroadcast(jid),
                    // implement to handle retries & poll updates
                    getMessage: getMessage,
                });
                store === null || store === void 0 ? void 0 : store.bind(sock.ev);
                sendMessageWTyping = function (msg, jid) { return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, sock.presenceSubscribe(jid)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, (0, src_1.delay)(500)];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, sock.sendPresenceUpdate('composing', jid)];
                            case 3:
                                _a.sent();
                                return [4 /*yield*/, (0, src_1.delay)(2000)];
                            case 4:
                                _a.sent();
                                return [4 /*yield*/, sock.sendPresenceUpdate('paused', jid)];
                            case 5:
                                _a.sent();
                                return [4 /*yield*/, sock.sendMessage(jid, msg)];
                            case 6:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                // the process function lets you process all events that just occurred
                // efficiently in a batch
                sock.ev.process(
                // events is a map for event name => event data
                function (events) { return __awaiter(void 0, void 0, void 0, function () {
                    var update, connection, lastDisconnect, _a, chats, contacts, messages, isLatest_1, upsert, _i, _b, msg, _c, _d, _e, key, update, pollCreation, _f, _g, contact, newUrl, _h;
                    var _j, _k;
                    return __generator(this, function (_l) {
                        switch (_l.label) {
                            case 0:
                                // something about the connection changed
                                // maybe it closed, or we received all offline message or connection opened
                                if (events['connection.update']) {
                                    update = events['connection.update'];
                                    connection = update.connection, lastDisconnect = update.lastDisconnect;
                                    if (connection === 'close') {
                                        // reconnect if not logged out
                                        if (((_k = (_j = lastDisconnect === null || lastDisconnect === void 0 ? void 0 : lastDisconnect.error) === null || _j === void 0 ? void 0 : _j.output) === null || _k === void 0 ? void 0 : _k.statusCode) !== src_1.DisconnectReason.loggedOut) {
                                            startSock();
                                        }
                                        else {
                                            console.log('Connection closed. You are logged out.');
                                        }
                                    }
                                    console.log('connection update', update);
                                }
                                if (!events['creds.update']) return [3 /*break*/, 2];
                                return [4 /*yield*/, saveCreds()];
                            case 1:
                                _l.sent();
                                _l.label = 2;
                            case 2:
                                if (events.call) {
                                    console.log('recv call event', events.call);
                                }
                                // history received
                                if (events['messaging-history.set']) {
                                    _a = events['messaging-history.set'], chats = _a.chats, contacts = _a.contacts, messages = _a.messages, isLatest_1 = _a.isLatest;
                                    console.log("recv ".concat(chats.length, " chats, ").concat(contacts.length, " contacts, ").concat(messages.length, " msgs (is latest: ").concat(isLatest_1, ")"));
                                }
                                if (!events['messages.upsert']) return [3 /*break*/, 7];
                                upsert = events['messages.upsert'];
                                console.log('recv messages ', JSON.stringify(upsert, undefined, 2));
                                if (!(upsert.type === 'notify')) return [3 /*break*/, 7];
                                _i = 0, _b = upsert.messages;
                                _l.label = 3;
                            case 3:
                                if (!(_i < _b.length)) return [3 /*break*/, 7];
                                msg = _b[_i];
                                if (!(!msg.key.fromMe && doReplies)) return [3 /*break*/, 6];
                                console.log('replying to', msg.key.remoteJid);
                                return [4 /*yield*/, sock.readMessages([msg.key])];
                            case 4:
                                _l.sent();
                                return [4 /*yield*/, sendMessageWTyping({ text: 'Hello there!' }, msg.key.remoteJid)];
                            case 5:
                                _l.sent();
                                _l.label = 6;
                            case 6:
                                _i++;
                                return [3 /*break*/, 3];
                            case 7:
                                if (!events['messages.update']) return [3 /*break*/, 11];
                                console.log(JSON.stringify(events['messages.update'], undefined, 2));
                                _c = 0, _d = events['messages.update'];
                                _l.label = 8;
                            case 8:
                                if (!(_c < _d.length)) return [3 /*break*/, 11];
                                _e = _d[_c], key = _e.key, update = _e.update;
                                if (!update.pollUpdates) return [3 /*break*/, 10];
                                return [4 /*yield*/, getMessage(key)];
                            case 9:
                                pollCreation = _l.sent();
                                if (pollCreation) {
                                    console.log('got poll update, aggregation: ', (0, src_1.getAggregateVotesInPollMessage)({
                                        message: pollCreation,
                                        pollUpdates: update.pollUpdates,
                                    }));
                                }
                                _l.label = 10;
                            case 10:
                                _c++;
                                return [3 /*break*/, 8];
                            case 11:
                                if (events['message-receipt.update']) {
                                    console.log(events['message-receipt.update']);
                                }
                                if (events['messages.reaction']) {
                                    console.log(events['messages.reaction']);
                                }
                                if (events['presence.update']) {
                                    console.log(events['presence.update']);
                                }
                                if (events['chats.update']) {
                                    console.log(events['chats.update']);
                                }
                                if (!events['contacts.update']) return [3 /*break*/, 17];
                                _f = 0, _g = events['contacts.update'];
                                _l.label = 12;
                            case 12:
                                if (!(_f < _g.length)) return [3 /*break*/, 17];
                                contact = _g[_f];
                                if (!(typeof contact.imgUrl !== 'undefined')) return [3 /*break*/, 16];
                                if (!(contact.imgUrl === null)) return [3 /*break*/, 13];
                                _h = null;
                                return [3 /*break*/, 15];
                            case 13: return [4 /*yield*/, sock.profilePictureUrl(contact.id).catch(function () { return null; })];
                            case 14:
                                _h = _l.sent();
                                _l.label = 15;
                            case 15:
                                newUrl = _h;
                                console.log("contact ".concat(contact.id, " has a new profile pic: ").concat(newUrl));
                                _l.label = 16;
                            case 16:
                                _f++;
                                return [3 /*break*/, 12];
                            case 17:
                                if (events['chats.delete']) {
                                    console.log('chats deleted ', events['chats.delete']);
                                }
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/, sock];
        }
    });
}); };
startSock();
